name: "Frontend License & Security Scan"

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  BASE_URL: "${{ github.server_url }}/${{ github.repository }}/blob/${{ github.ref_name }}"

jobs:
  scan_and_notify:
    name: Scan Frontend Dependencies and Notify
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Download and Extract ScanCode Toolkit v32.0.8
        run: |
          wget https://github.com/aboutcode-org/scancode-toolkit/releases/download/v32.0.8/scancode-toolkit-v32.0.8_py3.10-linux.tar.gz
          tar -xzf scancode-toolkit-v32.0.8_py3.10-linux.tar.gz
          mv scancode-toolkit-v32.0.8 scancode-toolkit
          chmod +x scancode-toolkit/scancode
          chmod +x scancode-toolkit/configure

      - name: Configure ScanCode Toolkit
        run: |
          cd scancode-toolkit
          ./configure

      - name: Verify Python Version
        run: python --version

      - name: Run ScanCode on Frontend Folder
        run: |
          cd scancode-toolkit
          ./scancode --copyright -n 2 --json ../scancode-results.json "$GITHUB_WORKSPACE/frontend/" || (echo "ScanCode failed!" && exit 1)

      - name: Debug - Check if Results File Exists
        run: ls -l scancode-results.json || echo "scancode-results.json NOT FOUND"

      - name: Filter JSON Data (Remove Empty Copyrights)
        run: |
          jq '{files: [(.files[] | select(.copyrights | length > 0))]}' scancode-results.json > filtered-results.json

      - name: Update File URLs in JSON
        run: |
          jq --arg baseUrl "$BASE_URL" '
            {files: [ 
              .files[] | 
              .URL = ($baseUrl + "/" + .path) 
              | del(.path)
            ]}' filtered-results.json > final-results.json

      - name: Show Processed JSON
        run: cat final-results.json

      - name: Upload Processed JSON as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: final-json
          path: final-results.json
      - name: Process JSON
        run: jq -r '.files[] | .URL as $url | .copyrights[] | "\(.copyright) - \($url)#L\(.start_line)-L\(.end_line)"' final-results.json > output.txt
      - name: Upload Processed JSON as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: final-output
          path: output.txt
      # - name: Send JSON Data to Google Chat Webhook in Chunks
      #   shell: bash
      #   env:
      #     WEBHOOK_URL: ${{ secrets.GOOGLE_WEBHOOK }}
      #     # Adjust CHUNK_SIZE (number of characters per chunk) as needed.
      #     CHUNK_SIZE: 3000
      #   run: |
      #     #!/usr/bin/env bash
      #     set -e
      #     set -x
          
      #     FILE="final-results.json"
      #     if [ ! -f "$FILE" ]; then
      #       echo "File $FILE not found, exiting."
      #       exit 1
      #     fi
          
      #     CONTENT=$(cat "$FILE")
      #     TOTAL_LEN=${#CONTENT}
      #     echo "Total content length: $TOTAL_LEN"
      #     INDEX=0
      #     CHUNK_NUM=0
      #     while [ $INDEX -lt $TOTAL_LEN ]; do
      #       CHUNK=${CONTENT:$INDEX:$CHUNK_SIZE}
      #       # Build the JSON payload for Google Chat webhook.
      #       JSON_PAYLOAD=$(jq -n --arg text "$CHUNK" '{text: $text}')
      #       echo "Sending chunk #$CHUNK_NUM (index $INDEX):"
      #       echo "$JSON_PAYLOAD"
      #       # Send the chunk using curl.
      #       curl -X POST -H "Content-Type: application/json" -d "$JSON_PAYLOAD" "$WEBHOOK_URL"
      #       INDEX=$((INDEX + CHUNK_SIZE))
      #       CHUNK_NUM=$((CHUNK_NUM + 1))
      #     done
      #     echo "All chunks sent successfully!"
